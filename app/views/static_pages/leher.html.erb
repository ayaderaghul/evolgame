<% provide(:title, "Le Her") %>

<div class="tile is-ancestor">
  <div class="tile is-vertical">
    <div class="tile">
      <div class="tile is-parent is-vertical">
	<article class="tile is-child notification is-primary">

<h1 class="title"> Introduction </h1>

<div class="videoframe">
  <iframe height="400px" width="100%" style="height:400px !important;" src="https://www.youtube.com/embed/bUjlIcKAi7E" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
  <p><i>
      this is <a href="https://youtu.be/IWd-2HmtQ_Y" target="_blank">after</a> the cold bath</i>
  </p>

</div>
	</article>

	<article class="tile is-child notification is-light">
	  <h2 class="title">le Her</h2>
<p>
There is a book that talks about precursors in mathematical economics, in which mentions a Waldegrave who lived in late 17th century. He studied a game called <i>le Her </i> in French which is <i> the gentleman </i> in English and <i> der Herr </i> in German. He communicated with Monmort about his thoughts on how the game <i>should</i> be played. Monmort then forwarded the thread to Bernoulli and the three (variants said that there are some others) formed a slack.
</p>
<br>
<p>
Anyway, while the two latter mathematicians were discussing on ways of playing and the probability of winning for each way of playing, Waldegrave went further to describe a way of mixing over these <i>ways</i>, and made a remark that it was "such an unusual way of playing". It is truly remarkable that extra step Waldegrave took, especially because the way it is deducted seems just as natural as it seems strange.
</p>
	</article>

	<article class="tile is-child notification is-light">
	  <h2 class="title">The game</h2>
<i> adapted from Kuhn's description </i>
	  <p> There are two players: A and B. <br>
<br>
	    Act 1: A deals B a single card at random from an ordinary deck of cards, then deals a single card to himself; neither sees the card dealt to the other. The cards have value in order from the lowest to highest: ace, two, three.. ten, jack, queen, king.</p>
<br>
	  <p> Act 2: Who has higher card wins. So if B is not satisfied with his card, she can tell A to exchange cards, except if A has dealt herself a king, in that case A automatically wins.</p>
	    <br>
<p>	    Act 3: If B tells to exchange, and after the exchange, A is not happy, A can exchange it for another card dealt from the deck at random. However, if the third card dealt from the deck is a king, the exchange is not allowed and A has to keep her card and automatically loses.</p>
	    <br>
<p>	    They now compare cards and who has higher card wins. If they hold equal cards, A wins.
</p>

	  </article>

	<article class="tile is-child notification">
<h2 class="title"> Different ways to play </h2>
<p>
Because there are 13 possible cards, a way to play (a policy) need to describe to you what to do in all 13 cases in which you possibly receive one of those 13 cards. For player B, here is one such way, as an example: </p>

<pre>

  | A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
  |---|---|---|---|---|---|---|---|---|----|---|---|---|
  | C | C | H | C | H | C | C | C | C | C  | H | H | H |

</pre>

<p>In the above table, C is to change the card, and H is to hold the card. We can see that, with 13 slots and each slot has 2 possible actions (C or H), the total possibility is 2^13. We can call one way to play a strategy, and the set of 2^13 strategy is the strategy set. Similarly, player A has the same strategy set. If we start to plot the 2^13 x 2^12 strategy space in our head, it gets difficult. </p>
<br>
<p> Let's make a move that would drastically weed out strategies that seem to have no reason at all (i.e. the ones that are clearly <i>dominated</i> by other strategies). Think about the saying: change the low card and hold the high one. All the strategies in the form of a mixed sequence of C and H here and there (like, C C C H C C H C H..) are dominated by one of those 14 strategies with k first components are C and the rest are H (like C C C H H H H..) </p>
<br>
<p> We have 14 strategies left, and we can go further to remove some of them. Think again about the saying: change the low card and hold the high one. From B's point of view, if she is dealt a low card, she feels like to change and if dealt a high card, she feels like to keep. For B, the tie is at card 7. If dealt 8 and above, she keeps, if received 6 and below, she changes. If dealt 7, she needs to think. From A's point of view, the tie is at card 8. If dealt 8, she needs to think. All the other strategies are dominated by these ones. I plot these survived strategies in the following table:  </p>

<pre>

   | A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
   |---|---|---|---|---|---|---|---|---|----|---|---|---|
A1 | C | C | C | C | C | C | C | C | H | H  | H | H | H |
A2 | C | C | C | C | C | C | C | H | H | H  | H | H | H |
B1 | C | C | C | C | C | C | C | H | H | H  | H | H | H |
B2 | C | C | C | C | C | C | H | H | H | H  | H | H | H |

</pre>

	</article>

	<article class="tile is-child notification is-light">

	  <h2 class="title"> Matching </h2>
<p> The next question we ask, let's match A1 and B1, just to see. We know that the deck has 52 cards, comprising of 13 types of cards multiplied by 4 cards for a same number. So each player can receive one of those 13 possible cards. There can be 13*13 = 169 possible outcomes. Let's calculate the probability to win for B in these possible outcomes and fill it in the following table. </p>

<pre>

B \ A| A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
-----|---|---|---|---|---|---|---|---|---|----|---|---|---|
   A |   |   |   |   |   |   |   |   |   |    |   |   |   |
   1 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   2 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   3 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   4 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   5 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   6 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   7 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   8 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   9 |   |   |   |   |   |   |   |   |   |    |   |   |   |
   10|   |   |   |   |   |   |   |   |   |    |   |   |   |
   J |   |   |   |   |   |   |   |   |   |    |   |   |   |
   Q |   |   |   |   |   |   |   |   |   |    |   |   |   |
   K |   |   |   |   |   |   |   |   |   |    |   |   |   |
   
   
</pre>
<br>
<p> If A is dealt a K, A wins at 100%. Therefore the probability to win for B is 0 regardless of the card B got. So the last column is filled with 0. In case B is dealt a K, except for the case that A also get a K, B automatically wins. Therefore the last row (except the last column) is filled with 1. We fill in the table as follows:</p>


<pre>

B \ A| A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
-----|---|---|---|---|---|---|---|---|---|----|---|---|---|
   A |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   1 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   2 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   3 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   4 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   5 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   6 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   7 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   8 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   9 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   10|   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   J |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   Q |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   K | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1  | 1 | 1 | 0 |
   
   
</pre>
<br>
<p> Now let's look at the first cell, it is the one that both are dealt an Ace. To know what to do next, we check their strategies A1 and B1: </p>
<pre>

   | A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
   |---|---|---|---|---|---|---|---|---|----|---|---|---|
A1 | C | C | C | C | C | C | C | C | H | H  | H | H | H |
B1 | C | C | C | C | C | C | C | H | H | H  | H | H | H |

</pre>
<br>
	  <p>
	    
Given an ace, both want to change the card. Hence with (Ace, Ace), and (Change, Change), things happen as follows: B changes. A knows that B now has Ace, and both knows that Ace loses to all other cards. So the probability to win for B in this case is 0. This translates into the action of putting 0 in the first cell. </p>

<pre>

B \ A| A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
-----|---|---|---|---|---|---|---|---|---|----|---|---|---|
   A | 0 |   |   |   |   |   |   |   |   |    |   |   | 0 |
   1 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   2 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   3 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   4 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   5 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   6 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   7 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   8 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   9 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   10|   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   J |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   Q |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   K | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1  | 1 | 1 | 0 |
   
</pre>
<br>
<p> Cool, let's try the next cell. With (Ace, 2) and (Change, Change): B changes Ace for 2. A know knows that B has 2, and she changes. B can hope that A would get a card smaller than 2 (which is one of the 3 Aces left) or one of the 4 kings) because the rules say that if A get a King now, A cannot change and has to keep the Ace. The prospect is 7 cards out of the remaining 50 cards. The probability to win for B therefore is 7/50.</p>


<pre>

B \ A| A | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | J | Q | K |
-----|---|---|---|---|---|---|---|---|---|----|---|---|---|
   A | 0 |.14|   |   |   |   |   |   |   |    |   |   | 0 |
   1 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   2 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   3 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   4 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   5 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   6 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   7 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   8 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   9 |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   10|   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   J |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   Q |   |   |   |   |   |   |   |   |   |    |   |   | 0 |
   K | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1  | 1 | 1 | 0 |
   
</pre>


	</article>

	<article class="tile is-child notification is-light">
	  <h2 class="title"> Mamma mia..</h2>
<p> ...let's try to automate the process of filling in this table. </p>

<p> <b>Need</b> We need to write a function that inputs 2 strategies by 2 players, and 2 cards dealt to 2 players respectively and then outputs the probability to win for B.</p>
<br>
<p> Let's articulate this task in the following steps: </p>

<ul class="list">
  <li class="list-item"> If A gets a King, the returned number is 0. </li>
  <li class="list-item"> After we check for the above condition, we check whether B gets a King. If yes, the returned number is 1. Otherwise, move forward. </li>
  <li class="list-item"> According to their strategies, do they want to change the card? </li>
  <li class="list-item"> If B feels like the card she is holding is too low, B tells A to exchange. At this point we know for sure the card B would hold when the game ends. </li>
  <li class="list-item"> If A changes, she gets a new card from the deck. At this point, we can count the number of cards in the deck that favor B. They are cards lower than the one B currently holding and all the Kings. </li>
</ul>

	  <p> With this description, you can proceed to express the task in the language of your choice. I would write in Racket but I do understand and code in other languages (Python, Ruby, Go, C) and I would like to learn more about other languages (Clojure, R, Java, Matlab etc) so if you have solutions in these languages I would still like to have a look. </p>    <br>

	</article>
	<article class="tile is-child notification is-light">
<h2 class="title"> Piece 1</h2>
<p> <a href="https://repl.it">repl.it</a> is one of the best things that happens in the Matrix. Don't unplug :) </p>
<br>
<p>First, let's write small pieces of codes that can be put together into a solution later. The firs piece is a function to see if one person want to change the card <code>x</code> or not. Because a strategy can be described as a threshold at which the person starts to hold the card, I call the parameter <code>xhold</code>.</p>

<pre>
  (define (change? x xhold)
   (>= x xhold))
</pre>
<br>
I don't feel like I can lecture about the poetry of S-expression. For that, please read the book: <a href="https://htdp.org/">How to Design Programs</a> and the blog: <a href="http://paulgraham.com/">Paul Graham on LISP</a>. Here I give you my short take: think of an expression as a sentence which is wrapped in a pair of brackets. Every expression starts with a verb that do something to the objects after that verb. All expressions evaluate to some value (number, string, etc) so you can nest sentence inside sentence.
<pre>
  (buy milk eggs)
  (sleep)
  (take ice-bath)
  (fry (mix milk eggs flour))
</pre>
<br>
<code>define</code> is a bit different. <code>define</code> defines stuff, like new objects and new verbs.

<pre>
  (define apple orange)
  ; here we define the orange to be apple
  ; in other words, the symbol apple now holds the value orange
  (define + *)
  ; the symbol + now holds the action multiply
  (define (cut x) ; here we define new verb
   (take-out knife)
   (push knife x))
</pre>
<br>

Back to the card game and the function <code>change?</code> we just wrote. Before we start with examples, let's set a convention that is a bit unusual for non-coders but very natural for coders: we count the card from 0 to 12 instead of Ace to King. As you can see that the function inputs 2 parameters: <code>x</code> and <code>xhold</code>. If I receive card 2, <code>x = 1</code>. If my threshold to hold is card 8, <code>xhold = 7</code>. In the following repl, you see on top of the frame a green arrow button (<code>Run</code>), and then a white-background editor to write the code. I already wrote the definition of the function and some other <code>print</code> function to print out 2 examples. Below that is a black-background repl that you can speak Racket (Scheme) with it because it understands. For now the repl only speak pure Racket, and if you type in the example <code>(change? 1 7)</code> it would replies that <code>unbound symbol</code>. It does not understand <code>change?</code> yet. To make it understand, you click the <code>Run</code> button. The repl would now have a new word (<code>change?</code>) in its vocab. Cool huh? It means that if you teach it new stuff, the repl can start to converse with you about life and universe. After clicking <code>Run</code>, you can play around a bit and try some other examples.

	  <iframe height="400px" width="100%" style="height:500px !important;" src="https://repl.it/@ayaderaghul/test?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

	  Please write the code in the lang you want: Python, C, Ruby, Java, R, Matlab.. and give it to me (or give me the gist), I publish them.
	  
	  </article>
	
      </div>
    </div>
  </div>
</div>







<p>Second, I write a function to swap the cards, for B to swap if she decides to change:</p>

  <pre class="prettyprint linenums:4">

  (define (swap x y)
  (list y x))
  
</pre>

<p>Third, if A does not change her card during the play, we can just compare their cards to decide the probability to win of B. If A holds a card of at least as high as B, A wins.</p>

  <pre class="prettyprint linenums:7">

  (define (compare a b)
  (if (>= a b) 0 1))
  
</pre>

<p>After building the small pieces, now we can write the big function to calculate the probability to win of B in all cases:</p>
  <pre class="prettyprint linenums:10">

; for the sake of a later for loop
; I count cards from 0 to 12.
  
(define (b-to-win a1 b1 ahold bhold)
 (cond
  [(= a1 12) 0]
  [(= b1 12) 1]
  [else
   (begin
   (match-define (list a2 b2)
    (if (change? b1 bhold)
        (swap a1 b1) (list a1 b1)))
   (define a3 (if (change? b1 bold)
               (if (< a2 b2) -1 a2)
               (if (change? a2 ahold) -1 a2)))
   (if (not (= a3 -1))
     (compare a3 b2)
     (exact->inexact (/ (+ (smaller b2 a2)
                        (if (< a2 b2) 4 0)) 50))))]))
  </pre>

<p>It seems long, but it is a flow of <code> cond </code> and <code> if </code>.</p>

<ul>
<li>The first act of the game is when the two cards are first dealt, they are stored in variables a1 and b1 respectively. The first two corner cases we can check easily is when A or B gets the King. It goes sequentially so if it enters the second cond clause, it already means that A does not hold a King, and B automatically wins. If none holds a King, the second act of the game begins, with the question whether B wants to change her card or not.</li>

<li>Define new variables a2 b2 to hold the card A and B have in the second act of the game: if B wants to change, the cards are swapped, if not, the cards stay the same but are hold in the new labels.</li>

<li>Then we proceed to the third act of the game: whether A gets a new random card from the deck or not, according to her strategy. If B swapped her card in the second act, now A knows what card B holds and she decides accordingly. If B holds her original card, A proceeds according to her strategy. Anyway, if A decides to hold her card, the card is stored in the new variable a3, if not, the variable a3 holds the number -1.</li>

<li>At this point the game course ends and we can check the card to see who wins. If A did not change the card in the third act, we can just compare a2 (or a3) and b2. If A draws a new card, to calculate the probability for B to win, we need to calculate the number of cards in the deck that is favorable to B.

  <ul>
    
<li>A get the one that is smaller than the one currently in B's hand (b2).The number of cards in the deck that are smaller than b2 has to take into account the card already in A's hand.<li>

<li>If a2 is already smaller than b2 AND A get a King. In this case A has to return the King and accept the one she has (a2).</li>

<li>For example, if b2 is 3 and a2 is 2 and A changes, B hopes for A to draw one of those 4 Aces, 3 Twos left in the deck, 4 Kings. If b2 is 3 and a2 is 4 and A changes, B hopes for A to draw one of those 4 Aces and 4 Twos in the deck. In this case, if A get a King, A returns the King and has 4 and still wins.</li>
  </ul>
</ul>
<p>So we write function <code> how-many-smaller </code></p>
  <pre class="prettyprint linenums:27">

(define (how-many-smaller b a)
        (define counters (range b))
        (foldl (lambda (nxt init) (if (= nxt a)
                                      (+ 3 init) (+ 4 init)))
               0 counters))

</pre>

<p>In the above function, variable counters are the range of cards smaller than the one B holding. And during the fold, if it happens to be equal to the one A currently holding, we only add 3 instead of 4.</p>

<p>We can see that in the big funciton b-to-win, after counting how many smaller cards, we add 4 kings and then divide them all by 50. 50 is the number of cards currently in the deck (2 already in 2 players' hand).</p>

<p>Now this function is to calculate the probability to win for A and B at each possible deal of the cards, regarding their strategy. If we fix the strategy, i.e. for A to hold from 7 and B to hold from 8, we can run a nested for loop through the range of 13 possible cards and generate a matrix for the 13*13=169 possible deals.</p>

  <pre class="prettyprint linenums:33">

; reminder: in the code, I count the card from 0
(define (b-to-win-at-76 a1 b1)
	(b-to-win a1 b1 7 6))

(define matrix
 (for/list ([j (in-range 13)])
  (for/list ([i (in-range 13)])
   (b-to-win-at-77 i j))))

</pre>
  <pre class="prettyprint">
    
> matrix
'((0 0.14 0.22 0.3 0.38 0.46 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0 0 0.22 0.3 0.38 0.46 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0 0 0 0.3 0.38 0.46 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0 0 0 0 0.38 0.46 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0 0 0 0 0 0.46 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0 0 0 0 0 0 0.54 0.62 0.7 0.78 0.86 0.94 0)
  (0.54 0.54 0.54 0.54 0.54 0.54 0.48 0 0 0 0 0 0)
  (0.62 0.62 0.62 0.62 0.62 0.62 0.62 0 0 0 0 0 0)
  (0.7 0.7 0.7 0.7 0.7 0.7 0.7 1 0 0 0 0 0)
  (0.78 0.78 0.78 0.78 0.78 0.78 0.78 1 1 0 0 0 0)
  (0.86 0.86 0.86 0.86 0.86 0.86 0.86 1 1 1 0 0 0)
  (0.94 0.94 0.94 0.94 0.94 0.94 0.94 1 1 1 1 0 0)
  (1 1 1 1 1 1 1 1 1 1 1 1 0))
      
</pre>

<p>  But this is not the end. The matrix we got is to describe the probability to win for B in each possible outcome. However, what's about the probability at which each of these outcomes happen? The outcome on the diagonal happens at the probability 4/52 * 3/51 because the probability to get an Ace is 4 out of 52 cards, after that the probability to get another Ace is 3 left out of 51 cards left. The probability of the outcome off diagonal happens at 4/52 * 4/51 each. We need to multiply each entry with the probability that it happens and then sum them all together to have the probability to win for B using the strategy B1.</p>

<p>  Let's define another function to calculate the probability to win of B, with different thresholds to hold for both.</p>

  <pre class="prettyprint linenums:42">

(define (calculate ahold bhold)
 (apply +
  (for/list ([j (in-range 13)])
   (apply +
    (for/list ([i (in-range 13)]) 
     (* (b-to-win i j ahold bhold) 
      (if (= i j) (* (/ 4 52) (/ 3 51)) (* (/ 4 52) (/ 4 51)))))))))

</pre>

<p>  We multiply each entry with its probability to happen, and then we apply function plus over the whole row to get the sum of that row. Then we loop over the column.</p>

<p>  Here are the result for 4 strategies A1 A2 B1 B2</p>

  <pre>
    ; Here I count the card from 1
    
     B \ A | Hold from 8 | Hold from 9
   --------|-------------|-------------
Hold from 7|    0.5118   |    0.5129
Hold from 8|    0.5137   |    0.5118    
    </pre>

<p>  If you look at the table, you can see that, if A decides to hold the 8, B should change the 7 (because 0.5137 > 0.5118, due to weak definition of rationality: I prefer what is more). If A changes the 8, B should hold the 7.</p>

<p>  What should B do? Waldegrave looked at it this way. And this is exactly how you would solve a game like this for mixed strategy in modern time. B assigns to variable c the probability that A would play A1, hence the probability to play A2 is 1-c.</p>

  <pre>
    ; Here I count the card from 1
    
     B \ A | Hold from 8 | Hold from 9
   --------|-------------|-------------
Hold from 7|    0.5118   |    0.5129
Hold from 8|    0.5137   |    0.5118
                  c            1-c    
    </pre>

<p>  B thinks like this:</p>
<ul>
  <li> If I play B1, there is c probability I get 0.5118, (1-c) probability I get 0.5129. The expected payoff I get is (0.5118 0.5129) (c 1-c).</li>
  <li> If I play B2, the expected payoff I get is (0.5137 0.5118) (c 1-c). </li>
</ul>
<p>  If I solve for c at which these two expected payoffs equal, and plug back the c = 3/8 to find my expected payoff E(c) = 0.5125
</p>

<p>  .... TO BE CONTINUED ...</p>

  
<footer>
  Please speak up if you feel like something deserves to be said: Discord: <a href="https://discord.gg/Jbjj6NS" target="_blank">chat</a> | Github: <a href="https://github.com/ayaderaghul/evolgame" target="_blank"> repo </a>
  
</footer>
